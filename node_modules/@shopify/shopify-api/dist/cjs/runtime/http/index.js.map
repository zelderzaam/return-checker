{"version":3,"file":"index.js","sources":["../../../../../../runtime/http/index.ts"],"sourcesContent":["import type {\n  AbstractFetchFunc,\n  AbstractConvertRequestFunc,\n  AbstractConvertIncomingResponseFunc,\n  AbstractConvertResponseFunc,\n  NormalizedResponse,\n  AbstractConvertHeadersFunc,\n} from './types';\n\nexport * from './cookies';\nexport * from './headers';\nexport * from './utils';\n\nexport * from './types';\n\nexport function isOK(resp: NormalizedResponse) {\n  // https://fetch.spec.whatwg.org/#ok-status\n  return resp.statusCode >= 200 && resp.statusCode <= 299;\n}\n\n// We ignore mutable export linting errors because we explicitly want these abstract functions to be overwritten.\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let abstractFetch: AbstractFetchFunc = () => {\n  throw new Error(\n    \"Missing adapter implementation for 'abstractFetch' - make sure to import the appropriate adapter for your platform\",\n  );\n};\nexport function setAbstractFetchFunc(func: AbstractFetchFunc) {\n  abstractFetch = func;\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let abstractConvertRequest: AbstractConvertRequestFunc = () => {\n  throw new Error(\n    \"Missing adapter implementation for 'abstractConvertRequest' - make sure to import the appropriate adapter for your platform\",\n  );\n};\nexport function setAbstractConvertRequestFunc(\n  func: AbstractConvertRequestFunc,\n) {\n  abstractConvertRequest = func;\n}\n\n// By default we just return an empty NormalizedResponse because not all adapters will need to convert an incoming response\n// eslint-disable-next-line import/no-mutable-exports\nexport let abstractConvertIncomingResponse: AbstractConvertIncomingResponseFunc =\n  () => Promise.resolve({} as NormalizedResponse);\nexport function setAbstractConvertIncomingResponseFunc(\n  func: AbstractConvertIncomingResponseFunc,\n) {\n  abstractConvertIncomingResponse = func;\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let abstractConvertResponse: AbstractConvertResponseFunc = () => {\n  throw new Error(\n    \"Missing adapter implementation for 'abstractConvertResponse' - make sure to import the appropriate adapter for your platform\",\n  );\n};\nexport function setAbstractConvertResponseFunc(\n  func: AbstractConvertResponseFunc,\n) {\n  abstractConvertResponse = func;\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let abstractConvertHeaders: AbstractConvertHeadersFunc = () => {\n  throw new Error(\n    \"Missing adapter implementation for 'abstractConvertHeaders' - make sure to import the appropriate adapter for your platform\",\n  );\n};\nexport function setAbstractConvertHeadersFunc(\n  func: AbstractConvertHeadersFunc,\n) {\n  abstractConvertHeaders = func;\n}\n"],"names":["abstractFetch","abstractConvertRequest","abstractConvertIncomingResponse","abstractConvertResponse","abstractConvertHeaders"],"mappings":";;;;;AAeM,SAAU,IAAI,CAAC,IAAwB,EAAA;;IAE3C,OAAO,IAAI,CAAC,UAAU,IAAI,GAAG,IAAI,IAAI,CAAC,UAAU,IAAI,GAAG;AACzD;AAEA;AAEA;AACWA,qBAAa,GAAsB,MAAK;AACjD,IAAA,MAAM,IAAI,KAAK,CACb,oHAAoH,CACrH;AACH;AACM,SAAU,oBAAoB,CAAC,IAAuB,EAAA;IAC1DA,qBAAa,GAAG,IAAI;AACtB;AAEA;AACWC,8BAAsB,GAA+B,MAAK;AACnE,IAAA,MAAM,IAAI,KAAK,CACb,6HAA6H,CAC9H;AACH;AACM,SAAU,6BAA6B,CAC3C,IAAgC,EAAA;IAEhCA,8BAAsB,GAAG,IAAI;AAC/B;AAEA;AACA;AACWC,uCAA+B,GACxC,MAAM,OAAO,CAAC,OAAO,CAAC,EAAwB;AAC1C,SAAU,sCAAsC,CACpD,IAAyC,EAAA;IAEzCA,uCAA+B,GAAG,IAAI;AACxC;AAEA;AACWC,+BAAuB,GAAgC,MAAK;AACrE,IAAA,MAAM,IAAI,KAAK,CACb,8HAA8H,CAC/H;AACH;AACM,SAAU,8BAA8B,CAC5C,IAAiC,EAAA;IAEjCA,+BAAuB,GAAG,IAAI;AAChC;AAEA;AACWC,8BAAsB,GAA+B,MAAK;AACnE,IAAA,MAAM,IAAI,KAAK,CACb,6HAA6H,CAC9H;AACH;AACM,SAAU,6BAA6B,CAC3C,IAAgC,EAAA;IAEhCA,8BAAsB,GAAG,IAAI;AAC/B;;;;;;;;;"}